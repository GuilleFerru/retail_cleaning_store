
#version: '3.8'

services:

  # keycloak:
  #   image: quay.io/keycloak/keycloak:22.0.1
  #   command: start-dev
  #   environment:
  #     KEYCLOAK_ADMIN: admin
  #     KEYCLOAK_ADMIN_PASSWORD: admin
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - keycloak_data:/opt/keycloak/data

  # kong-db:
  #   image: postgres:13
  #   environment:
  #     POSTGRES_USER: kong
  #     POSTGRES_DB: kong
  #     POSTGRES_PASSWORD: kong
  #   volumes:
  #     - kong_db_data:/var/lib/postgresql/data

  # kong:
  #   image: kong:3.3
  #   depends_on:
  #     - kong-db
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-db
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #   ports:
  #     - "8000:8000" # proxy
  #     - "8001:8001" # admin
  #   healthcheck:
  #     test: ["CMD", "kong", "health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # redis:
  #   image: redis:7
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data

  # kafka:
  #   image: bitnami/kafka:latest
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #     KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
  #     ALLOW_PLAINTEXT_LISTENER: yes
  #   depends_on:
  #     - zookeeper

  # zookeeper:
  #   image: bitnami/zookeeper:latest
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ALLOW_ANONYMOUS_LOGIN: yes

  # prometheus:
  #   image: prom/prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana

  # jaeger:
  #   image: jaegertracing/all-in-one:1.42
  #   ports:
  #     - "16686:16686"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #     - "14268:14268"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # puerto de comunicaci√≥n con servicios
      - "15672:15672" # puerto de la UI web
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  products-postgres:
    image: postgres:15
    container_name: products-db
    restart: always
    environment:
      POSTGRES_DB: products_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - products_pgdata:/var/lib/postgresql/data

  inventory-postgres:
    image: postgres:15
    container_name: inventory-db
    restart: always
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - inventory_pgdata:/var/lib/postgresql/data
  
  pricing-postgres:
    image: postgres:15
    container_name: pricing-db
    restart: always
    environment:
      POSTGRES_DB: pricing_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    volumes:
      - pricing_pgdata:/var/lib/postgresql/data

  order-postgres:
    image: postgres:15
    container_name: order-db
    restart: always
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5436:5432"
    volumes:
      - order_pgdata:/var/lib/postgresql/data

  product-service:
    build:
      context: ../services/product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - DB_HOST=products-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=products_db
    volumes:
      - ../services/product-service:/app
      - product_node_modules:/app/node_modules

  inventory-service:
    build:
      context: ../services/inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - DB_HOST=inventory-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=inventory_db
    volumes:
      - ../services/inventory-service:/app
      - inventory_node_modules:/app/node_modules

  pricing-service:
    build:
      context: ../services/pricing-service
      dockerfile: Dockerfile
    container_name: pricing-service
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - DB_HOST=pricing-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=pricing_db
    volumes:
      - ../services/pricing-service:/app
      - pricing_node_modules:/app/node_modules

  order-service:
    image: node:23
    depends_on:
      - order-postgres

  # products-exporter:
  #   image: prometheuscommunity/postgres-exporter
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/products_db?sslmode=disable"
  #   ports:
  #     - "9187:9187"
  #   depends_on:
  #     - products-postgres

  # inventory-exporter:
  #   image: prometheuscommunity/postgres-exporter
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5433/inventory_db?sslmode=disable"
  #   ports:
  #     - "9188:9187"
  #   depends_on:
  #     - inventory-postgres

volumes:
  # keycloak_data:
  # kong_db_data:
  # redis_data:
  # grafana_data:
  products_pgdata:
  inventory_pgdata:
  pricing_pgdata:
  order_pgdata:
  product_node_modules:
  inventory_node_modules:
  pricing_node_modules:
  
  
